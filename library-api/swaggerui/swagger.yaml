openapi: 3.0.3
info:
  title: Swagger Library API - OpenAPI 3.0
  description: API for borrowing book from library
  termsOfService: http://swagger.io/terms/
  contact:
    email: library-api@shopee.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080
  - url: https://localhost:8080
tags:
  - name: auth
    description: Authentication
  - name: book
    description: Everything about book
  - name: borrowing
    description: Borrow or return a book
security:
  - BearerAuth: []
paths:
  /signin:
    post:
      tags:
        - auth
      summary: Sign in to get token
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorize credentials not match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizeError'
  /books:
    get:
      tags:
        - book
      summary: Get list available books in library
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid status value
components:
  schemas:
    Book:
      required:
        - id
        - title
        - stock
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Harry Potter
        description:
          type: string
          example: Adventure of harry potter
        cover:
          type: string
          example: https://image.com/image.png
        authorID:
          type: integer
          example: 12
        stock:
          type: integer
          example: 5
        author:
          $ref: '#/components/schemas/Author'
    Author:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Bambang Surambang
    Token:
      required:
        - idToken
      type: object
      properties:
        idToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzZWEtbGFicy1saWJyYXJ5IiwiZXhwIjoxNjU5OTIyODE1LCJpYXQiOjE2NTk5MjE5MTUsInVzZXIiOnsiaWQiOjEsIm5hbWUiOiJEZXdhIFVzZXIiLCJlbWFpbCI6ImRld2FAZ21haWwuY29tIiwicGhvbmUiOiIwODU5OTkyMjk5MSJ9fQ.BGv22BzrlO91NQl4yTeyk715YOSYaqgHnyJBFio-v8w
    Credentials:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: dewa@gmail.com
        password:
          type: string
          example: P@ssw0rd
    UnauthorizeError:
      type: object
      properties:
        code:
          type: string
          example: UNAUTHORIZED_ERROR
        statusCode:
          type: integer
          example: 401
        message:
          type: string
          example: "Unauthorized"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
